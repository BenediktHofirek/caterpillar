{"version":3,"sources":["components/gameNavigation.jsx","components/settings.jsx","components/board.jsx","components/winner.jsx","services/boardSetup.js","services/makeMove.js","services/findPossibleMoves.js","services/findBestMove.js","services/computerMove.js","services/findWay.js","components/caterpillarGame.jsx","services/handleHumanMove.js","services/findWinner.js","services/findBadMoves.js","App.js","serviceWorker.js","index.js"],"names":["GameNavigation","_ref","playersColors","showSettings","newGame","levelValue","changeLevel","react_default","a","createElement","className","style","backgroundColor","headColor","htmlFor","type","name","value","onChange","min","max","id","onClick","Settings","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","currentTarget","setState","defineProperty","objectSpread","_this2","handleSettingsChange","_this$state","boardSize","itemsToCollectCount","itemColor","emptyCellColor","key","Component","Board","boardCells","onKeyDown","tabIndex","ref","input","focus","board","x","boardRow","y","orderNumber","_boardCells$orderNumb","player","item","char","selectColor","makeBoard","head","number","bodyColor","Winner","message","winner","colors","gameOverMessages","index","findIndex","e","bgc","color","c","boardSetup","cellChars","_ref2","size","count","Math","pow","chars","i","String","fromCharCode","floor","random","makeCellChars","sizePower","probability","willSetItem","foot","makeBoardItems","makeMove","newBoardCells","targetIndex","playerPosition","targetChar","playerToMove","nextElement","playerFoot","findPossibleMoves","cells","pp","Number","bs","bs2","possibleMoves","_i","_possibleMovesIndexes","length","push","calculateItemDistace","itemPosition","playerRow","itemRow","abs","handleComputerMove","calcDepthForNextMove","badMoves","oldBoardCells","toConsumableArray","cell","bestMove","givenPossibleMoves","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","bm","_iterator","Symbol","iterator","next","done","err","return","apply","round","reverse","_possibleMoves","pm","searchResults","_i2","_possibleMoves2","visitedCells","a1c","subResults","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","temporaryResults","_i3","_subResults","possible","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_loop2","p","find","_iterator4","_loop3","temp","_temporaryResults","_i4","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","itemsIndexes","itemsDistance","map","smallestDistance","smallestItemIndexInBoardCells","distanceOfPossibleMovesToItem","moveWithShortestDistance","indexOfMoveWithShortestDistance","newCalcDepth","findBestMove","computerRunning","_this$state2","level","computerLevel","timeout","computerLevelRange","setTimeout","findWay","position","calculationDepht","CaterpilarGame","player0HeadColor","player0Color","player1HeadColor","player1Color","gameHasStarted","handleBadMoves","newBadMoves","findBadMoves","makeComputerMove","currentLevel","sing","ceil","timeoutRef","computerTimeoutRef","stopGame","clearTimeout","handleNewGame","makeNewBoard","proofItemsCount","filter","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","abrupt","stop","handleLevelChange","handleShowSettings","_ref3","_callee2","newState","_context2","_x","arguments","bind","assertThisInitialized","handleHumanMove","possibleMovesIndexes","indexOfTargetPosition","targetCell","indexOf","findWinner","itemsCount","player0Count","player1Count","badMovesIndexes","givenMoves","wayLength","nextProps","nextState","badMovesUpdate","computerTimeoutRefUpdate","givenWinner","_this$state3","Fragment","gameNavigation","settings","handleSettings","components_winner","components_board","App","client","react_router","caterpillarGame","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64388308.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nconst GameNavigation = ({\n  playersColors,\n  showSettings,\n  newGame,\n  levelValue,\n  changeLevel\n}) => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <div className=\"navbar game-nav\">\n        <div className=\"players\">\n          <div className=\"player-information hero\">\n            <div\n              className=\"player-color\"\n              style={{ backgroundColor: playersColors[0].headColor }}\n            />\n            <span className=\"player-name\">Player</span>\n          </div>\n          <div className=\"player-information opponent\">\n            <div\n              className=\"player-color\"\n              style={{ backgroundColor: playersColors[1].headColor }}\n            />\n            <span className=\"player-name\">Opponent</span>\n          </div>\n        </div>\n        <form className=\"form-inline\">\n          <label htmlFor=\"levelRange\">Level: {levelValue}</label>\n          <input\n            type=\"range\"\n            name=\"levelRange\"\n            value={levelValue}\n            onChange={changeLevel}\n            className=\"custom-range\"\n            min={1}\n            max={15}\n            id=\"levelRange\"\n          />\n        </form>\n        <div className=\"game-buttons\">\n          <button\n            className=\"btn m-2 btn-primary button-new-game\"\n            onClick={newGame}\n          >\n            New Game\n          </button>\n          <button\n            className=\"btn m-2 btn-primary button-settings\"\n            onClick={showSettings}\n          >\n            Settings\n          </button>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default GameNavigation;\n","import React, { Component } from \"react\";\n\nclass Settings extends Component {\n  state = {};\n\n  constructor(props) {\n    super(props);\n    this.state = { ...props };\n  }\n\n  handleChange = ({ currentTarget }) => {\n    const { name, value } = currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  render() {\n    const { handleSettingsChange } = this.props;\n    const {\n      boardSize,\n      playersColors,\n      itemColor,\n      emptyCellColor,\n      itemsToCollectCount\n    } = this.state;\n\n    return (\n      <div className=\"settings\">\n        <form>\n          <label htmlFor=\"boardSize\">Board Size: {boardSize}</label>\n          <input\n            type=\"range\"\n            name=\"boardSize\"\n            value={boardSize}\n            onChange={this.handleChange}\n            className=\"custom-range\"\n            min={4}\n            max={40}\n            id=\"boardSize\"\n          />\n          <label htmlFor=\"itemsToCollectCount\">Number of items: </label>\n          <select\n            onChange={this.handleChange}\n            value={itemsToCollectCount}\n            name=\"itemsToCollectCount\"\n            id=\"itemsToCollectCount\"\n            className=\"form-control\"\n          >\n            <option key=\"1\" value={1}>\n              Very small\n            </option>\n            <option key=\"2\" value={2}>\n              Small\n            </option>\n            <option key=\"3\" value={3}>\n              Medium\n            </option>\n            <option key=\"4\" value={4}>\n              Big\n            </option>\n            <option key=\"5\" value={5}>\n              Very big\n            </option>\n          </select>\n          <button\n            type=\"button\"\n            onClick={() => handleSettingsChange(this.state)}\n            className=\"btn btn-primary mt-5\"\n          >\n            Save Changes\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\nexport default Settings;\n","import React, { Component } from \"react\";\n\nconst Board = ({\n  boardSize,\n  boardCells,\n  playersColors,\n  itemColor,\n  emptyCellColor,\n  onKeyDown,\n}) => {\n  return (\n    <table onKeyDown={onKeyDown} tabIndex=\"0\" ref={input => input && input.focus()}>\n      <tbody>\n        {makeBoard(boardSize, boardCells, playersColors, itemColor, emptyCellColor)}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Board;\n\nfunction makeBoard(boardSize, boardCells, playersColors, itemColor, emptyCellColor) {\n  let board = [];\n\n  for (let x = 0; x < boardSize; x++) {\n    let boardRow = [];\n\n    for (let y = 0; y < boardSize; y++) {\n      const orderNumber = x * boardSize + y;\n      const { player, item, char } = boardCells[orderNumber];\n      boardRow[y] = (\n        <td\n          key={y}\n          style={{\n            backgroundColor: selectColor(player, item, playersColors, itemColor, emptyCellColor)\n          }}\n        >\n          {!player ? char : null}\n        </td>\n      );\n    }\n\n    board[x] = <tr key={x}>{boardRow}</tr>;\n  }\n\n  return board;\n}\n\nfunction selectColor(player, item, playersColors, itemColor, emptyCellColor) {\n  if (player) {\n    if (player.head === true)\n      return playersColors[player.number].headColor;\n    else return playersColors[player.number].bodyColor;\n  } else if (item === \"item\") return itemColor;\n  else return emptyCellColor;\n}\n","import React from \"react\";\nimport { gameOverMessages } from \"../services/config.json\";\n\nconst Winner = ({ winner, newGame }) => {\n  if (winner === null) return null;\n\n  let message;\n  const colors = gameOverMessages;\n  const index = colors.findIndex(e => e.id === winner);\n\n  switch (winner) {\n    case 0: {\n      message = \"Congratulation, you won!\";\n      break;\n    }\n    case 1: {\n      message = \"Unfortunatelly, you lost!\";\n      break;\n    }\n    case \"draw\": {\n      message = \"Wow, it's a draw!\";\n      break;\n    }\n  }\n\n  return (\n    <div className=\"game-over-message-wrapper\">\n      <div\n        style={{\n          backgroundColor: colors[index].bgc,\n          color: colors[index].c\n        }}\n        className=\"game-over-message\"\n      >\n        <h3>{message}</h3>\n        <button\n          className=\"btn btn-lg m-2 btn-primary button-new-game\"\n          onClick={newGame}\n        >\n          New Game\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Winner;\n","export default function boardSetup() {\n  const cellChars = makeCellChars(this.state);\n  const boardCells = makeBoardItems(this.state, cellChars);\n  return boardCells;\n}\n\nfunction makeBoardItems(\n  { itemsToCollectCount, boardSize: size },\n  boardCells\n) {\n  /*algoritmus pro vypocet idealniho poctu itemu na zaklade zadane velikosti*/\n  const count = itemsToCollectCount/10 * size**2;\n  const sizePower = size ** 2;\n  const probability = (count / sizePower) * 100;\n\n  /*will set items*/\n  for (let i = 0; i < sizePower; i++) {\n    const willSetItem = Math.floor(Math.random() * 100) < probability;\n    willSetItem ? (boardCells[i].item = \"item\") : (boardCells[i].item = null);\n  }\n\n  /*will set players*/\n  let i = 0;\n  while (i < 2) {\n    let index = Math.floor(Math.random() * sizePower);\n    if (!boardCells[index].player) {\n      boardCells[index].player = { number: i, head: true, foot: true };\n      boardCells[index].item = null;\n      i++;\n    }\n  }\n\n  return boardCells;\n}\n\nfunction makeCellChars({ boardSize: size }) {\n  const count = size ** 2;\n\n  /*zadne pole nesmi sousedit se dvema poli se stejnym pismenem*/\n  let chars = [];\n\n  for (let i = 0; i < count; i++) {\n    chars[i] = {};\n    do {\n      chars[i].char = String.fromCharCode(\n        Math.floor(Math.random() * (123 - 97) + 97)\n      ); /*range of lowercase letters from utf-16*/\n    } while (\n      chars[i].char === (i - 1 >= 0 && chars[i - 1].char) || //1\n      chars[i].char === (i - 2 >= 0 && chars[i - 2].char) || //2\n      chars[i].char === (i - size >= 0 && chars[i - size].char) || //3\n      chars[i].char === (i - size - 1 >= 0 && chars[i - size - 1].char) || //4\n      chars[i].char === (i - size * 2 >= 0 && chars[i - size * 2].char) || //5\n      chars[i].char ===\n        (i - size + 1 >= 0 && (i + 1) % size && chars[i - size + 1].char) //6\n    );\n  }\n  /////////////\n  //     5\n  //   4 3 6\n  // 2 1 X\n  return chars;\n}\n","export default function makeMove(newBoardCells, targetIndex, playerPosition) {\n  const targetChar = newBoardCells[targetIndex].char;\n  const playerToMove = newBoardCells[playerPosition].player.number;\n\n  /*pojistka proti prepsani hrace jinym hracem*/\n  if(newBoardCells[targetIndex].player) return newBoardCells;\n\n  //player position je player head position\n  /*nize a nahore jsou newBoardCells pouzity jeste jako stare, jsou z nich\n        precteny udaje o cilovem poli*/\n\n  /*jestlize ji housenka jidlo na cilovem poli*/\n  if (newBoardCells[targetIndex].item === \"item\") {\n    /*upravi starou hlavu*/\n    newBoardCells[playerPosition].player.head = false;\n    newBoardCells[playerPosition].player.nextElement = targetIndex;\n\n    /*upravi novou hlavu*/\n    newBoardCells[targetIndex] = {\n      char: targetChar,\n      item: null,\n      player: { number: playerToMove, head: true, foot: false }\n    };\n\n    return newBoardCells;\n  } else {\n    /*najde foot*/\n    const playerFoot = newBoardCells.findIndex(\n      item =>\n        item.player &&\n        item.player.number === playerToMove &&\n        item.player.foot === true\n    );\n\n    /*zrusi starou hlavu a napise nextElement*/\n    newBoardCells[playerPosition].player.head = false;\n    newBoardCells[playerPosition].player.nextElement = targetIndex;\n\n    /*udela novou hlavu*/\n    newBoardCells[targetIndex] = {\n      char: targetChar,\n      item: null,\n      player: {\n        number: playerToMove,\n        head: true,\n        foot: false /*i v pripade, ze je hlava zaroven foot, prida se foot nize*/\n      }\n    };\n\n    /*preda foot novemu poslednimu elementu*/\n    const nextElement = newBoardCells[playerFoot].player.nextElement;\n    newBoardCells[nextElement].player.foot = true;\n\n    /*vymaze posledni clanek housenky*/\n    newBoardCells[playerFoot].item = null;\n    newBoardCells[playerFoot].player = null;\n\n    return newBoardCells;\n  }\n}\n","export default function findPossibleMoves(playerPosition, boardSize, cells) {\n  /* pp = playerPosition, bs = boardSize, bs2 = boardSize^2*, cells = boardCells*/\n  const pp = Number(playerPosition);\n  const bs = Number(boardSize);\n  const bs2 = bs * bs;\n\n  /*pohyb neni mozny po diagonale, pouze sloupec nebo radek*/\n  const possibleMovesIndexes = [\n    (pp - bs >= 0) && (pp - bs),\n    ((pp - 1 >= 0) && (pp % bs !== 0)) && (pp - 1),\n    ((pp + 1 < bs2) && ((pp + 1) % bs !== 0)) && (pp + 1),\n    (pp + bs < bs2) && (pp + bs)\n  ];\n\n  /*oreze prazdne kolonky a pozice, kde uz je hrac*/\n  let possibleMoves = [];\n  for (let e of possibleMovesIndexes) {\n    if (typeof e === \"number\" && !cells[e].player ) possibleMoves.push(e);\n  }\n\n  /*vraci array of indexes of cells in boardCells*/\n  return possibleMoves;\n}\n","import findPossibleMoves from \"./findPossibleMoves\";\n\nexport default function findBestMove(\n  playerPosition,\n  boardCells,\n  boardSize,\n  calcDepthForNextMove,\n  badMoves\n) {\n  /*nastaveni hloubky melkeho propoctu*/\n  const calculationDepht = 5;\n  /*najdi mozne pohyby*/\n  let givenPossibleMoves = findPossibleMoves(\n    playerPosition,\n    boardSize,\n    boardCells\n  );\n\n  /*pokud je jenom jediny mozny tah, udela ho*/\n  if (givenPossibleMoves.length === 1) {\n    return givenPossibleMoves[0];\n  } else if (givenPossibleMoves.length === 0) return null;\n\n  let possibleMoves = [];\n\n  if (badMoves && badMoves.length !== 0) {\n    for (let e of givenPossibleMoves) {\n      if (badMoves.findIndex(bm => bm === e) === -1) {\n        possibleMoves.push(e);\n      }\n    }\n  } else {\n    possibleMoves.push(...givenPossibleMoves);\n  }\n\n  /*v kratkem vyhledavani se jednotlivym moznostem prideli array, takze searchResults je [[],[]], aby slo urcit,\n  ze ktereho korene nalezeny item pochazi. Rozvinute vysledky se pak opet ukladaji do searchResults pro dalsi uroven vypoctu*/\n\n  /*pokud se nema prejit rovnou na hluboky vypocet, a tedy je calcDepth > 0*/\n  if (!calcDepthForNextMove) {\n    \n\n    /*obrati s pravdepodobnosti 50% poradi moznych tahu, aby nejezdil jenom smer levy horni roh*/\n    const reverse = Math.round(Math.random());\n    if (reverse) possibleMoves.reverse();\n\n    /*pokud je item hned na sousednim poli, presune se tam*/\n    for (let pm of possibleMoves) {\n      if (boardCells[pm].item === \"item\") {\n        return pm;\n      }\n    }\n    /*v searchResults je stejne poradi elementu jako v possibleMoves,\n     proto neni treba cislovani; cislo v searchResults udava pocet tahu k prvnimu \"food\" elementu*/\n    let searchResults = [];\n    for (let pm of possibleMoves) {\n      searchResults.push([pm]);\n    }\n\n    let i = 0;\n    const failureConstant = 100000;\n    let visitedCells = [];\n\n    while (i < calculationDepht) {\n      for (let a1c = 0; a1c < searchResults.length; a1c++) {\n        if (searchResults[a1c] === failureConstant) continue;\n        let subResults = [];\n        for (let e of searchResults[a1c]) {\n          subResults.push(e);\n        }\n        let temporaryResults = [];\n\n        /*dalsi uroven v tazich, tedy o pole dal ve vsech moznostech; mohou se najit stejne moznoti tahu\n      na ruznych polich (*), proto je nutna filtrace uz zde, napr\n        * X *\n        X   X  \n      */\n        for (let sub of subResults) {\n          const possible = findPossibleMoves(sub, boardSize, boardCells);\n          for (let p of possible) {\n            if (temporaryResults.find(e => e === p)) continue;\n            else temporaryResults.push(p);\n          }\n        }\n\n        subResults.length = 0;\n        /*kontrola jestli pole uz jednou nebylo nalezeno, aby se nechodilo v kruhu*/\n        for (let temp of temporaryResults) {\n          if (visitedCells.find(e => e === temp)) continue;\n          /*zapise nova pole do tabulky projitych poli\n         a zapise nove subvysledky do subResults*/ else {\n            visitedCells.push(temp);\n            searchResults[a1c].push(temp);\n          }\n        }\n\n        temporaryResults.length = 0;\n\n        /*pokud se nelze dostat dale, zkonci a zapise 1 000 000 jako indikaci, ze item nebyl nalezen*/\n        if (searchResults[a1c].length === 0) {\n          searchResults[a1c].push(failureConstant);\n          continue;\n        }\n\n        /*kontrola jestli byl nalezen \"food\"; pokud ano, vrati hodnotu daneho tahu.*/\n        for (let sub of searchResults[a1c]) {\n          if (boardCells[sub].item) {\n            return possibleMoves[a1c];\n          }\n        }\n      }\n      /*posun o jedno na dalsi hloubku v prohledavani*/\n      i++;\n    }\n  }\n\n  /*pokud se na dane hloubce nenasel item, prejde se na hloubkove prohledavani*/\n\n  let itemsIndexes = []; //indexy itemu v boardCells\n  for (let i = 0; i < boardCells.length; i++) {\n    if (boardCells[i].item) itemsIndexes.push(i);\n  }\n  /*pokud neni zadny item, nedelat tah*/\n  if (itemsIndexes.length === 0) return null;\n\n  /*spocita vzdalenost jednotlivych itemu k hraci*/\n  //vzdalenosti indexu jednotlivych itemu od playera, array*/\n  const itemsDistance = itemsIndexes.map(item => {\n    return calculateItemDistace(item, playerPosition, boardSize);\n  });\n\n  /*hodnota nejmensiho v tabulce indexu indexu na itemy v boardCells :-)*/\n  const smallestDistance = Math.min(...itemsDistance);\n  /*dodelat, aby v pripade stejne vzdalenosti dvou itemu bral ten, od ktereho je dale souper*/\n\n  /*index nejmensiho v tabulce indexu :-)*/\n  const indexOfSmalestDistace = itemsDistance.findIndex(\n    e => e === smallestDistance\n  );\n\n  /*index nejblizsiho itemu v boardCells*/\n  const smallestItemIndexInBoardCells = itemsIndexes[indexOfSmalestDistace];\n\n  /*najde nejblizsi mozny pohyb z possibleMoves k nejblizsimu indexu*/\n\n  const distanceOfPossibleMovesToItem = possibleMoves.map(item =>\n    calculateItemDistace(item, smallestItemIndexInBoardCells, boardSize)\n  );\n\n  /*najde pohyb s nejkratsi vzdalenosti v tabulce possibleMoves*/\n  const moveWithShortestDistance = Math.min(...distanceOfPossibleMovesToItem);\n  const indexOfMoveWithShortestDistance = distanceOfPossibleMovesToItem.findIndex(\n    e => e === moveWithShortestDistance\n  );\n\n  const newCalcDepth =\n    moveWithShortestDistance > calculationDepht && calcDepthForNextMove\n      ? calcDepthForNextMove - 1\n      : moveWithShortestDistance - calculationDepht - 1;\n\n  /*vrati pocet tahu, po ktere je zbytecne provadet kratkou kalkulaci*/\n  return {\n    targetIndex: possibleMoves[indexOfMoveWithShortestDistance],\n    calcDepthForNextMove: calcDepthForNextMove\n      ? calcDepthForNextMove - 1\n      : newCalcDepth\n  };\n}\n\nfunction calculateItemDistace(itemPosition, playerPosition, boardSize) {\n  const playerRow = Math.floor(playerPosition / boardSize);\n  const itemRow = Math.floor(itemPosition / boardSize);\n\n  const rowDistance = Math.abs(playerRow - itemRow);\n  const columnDistance = Math.abs(\n    (playerPosition % boardSize) - (itemPosition % boardSize)\n  );\n\n  const totalDistance = rowDistance + columnDistance;\n  return totalDistance;\n}\n","import makeMove from \"./makeMove\";\nimport findBestMove from \"./findBestMove\";\n\nexport default function handleComputerMove() {\n  /*computer je player 1*/\n  const { boardCells, boardSize, calcDepthForNextMove, badMoves } = this.state;\n  const oldBoardCells = [...boardCells];\n  const computerPlayer = 1;\n\n  const playerPosition = boardCells.findIndex(\n    cell =>\n      cell.player &&\n      cell.player.head === true &&\n      cell.player.number === computerPlayer\n  );\n\n  const bestMove = findBestMove(\n    playerPosition,\n    boardCells,\n    boardSize,\n    calcDepthForNextMove,\n    badMoves\n  );\n\n  /*i null je object, proto je nutna dvojita podminka*/\n  if (typeof bestMove === \"object\" && bestMove !== null) {\n    const targetIndex = bestMove.targetIndex;\n    const calcDepthForNextMove = bestMove.calcDepthForNextMove;\n    const newBoardCells = makeMove(oldBoardCells, targetIndex, playerPosition);\n    this.setState({\n      boardCells: newBoardCells,\n      computerRunning: 0,\n      calcDepthForNextMove\n    });\n    return;\n  }else {\n    /*pokud se nenaplnila predchozi podminka*/\n    const targetIndex = bestMove;\n    /*pokud nelze udelat tah nebo neni uz zadny item, tah se neprovede*/\n    \n    /*!!!!!!!!!!!!!POZOR, JE NUTNE DAT === NULL, PROTOZE TARGER MUZE BYT I NA POLE 0!!!!!!!!!!!!!!*/\n    /*pokud neni mozne udelat tah, pokusi se o dalsi tah az za 5 vterin*/\n    if (targetIndex === null) {\n      const { computerLevel: level, computerLevelRange: range} = this.state;\n      const timeout = 1000 * (5 - range[level-1]);\n      setTimeout(() => this.setState({ computerRunning: 0 }), timeout); \n      //!!!!!!!!!Vyse ma byt v produkcnim 0!!!!!!*/\n      return;\n    }\n\n    const newBoardCells = makeMove(oldBoardCells, targetIndex, playerPosition);\n    this.setState({ boardCells: newBoardCells, computerRunning: 0 });\n     return;\n  }\n}\n","import findPossibleMoves from \"./findPossibleMoves\";\n/*position je vzata z uz vyhledanych possible moves*/\n/*pokud je z ceste souper, pocita s tim, ze ten casem uhne*//********************** */\n/***********************************************************/\n/*vstup je konkretni index, ne array; vraci se maximalni delka cesty nebo 1000, pokud je cesta pruchozi*/\nexport default function findWay(\n  position,\n  boardCells,\n  boardSize,\n  calculationDepht,\n  player\n) {\n  let i = 0;\n  let subResults = [position];\n  let visitedCells = [position];\n\n  while (\n    i < calculationDepht) {\n    let temporaryResults = [];\n    /*dalsi uroven v tazich; mohou se najit stejne moznoti tahu\n      na ruznych polich (*), proto je nutna filtrace uz zde, napr\n        * X *\n        X   X  \n      */\n    for (let sub of subResults) {\n      const possible = findPossibleMoves(sub, boardSize, boardCells);\n      for (let p of possible) {\n        if (temporaryResults.find(e => e === p)) continue;\n        else temporaryResults.push(p);\n      }\n    }\n\n    subResults.length = 0;\n\n    /*kontrola jestli pole uz jednou nebylo nalezeno, aby se nechodilo v kruhu*/\n    for (let temp of temporaryResults) {\n      if (visitedCells.find(e => e === temp)) continue;\n      else {\n        /*zapise nova pole do tabulky projitych polia zapise nove subvysledky do subResults*/\n\n        visitedCells.push(temp);\n        subResults.push(temp);\n      }\n    }\n\n    /*pokud se nelze dostat dale, zkonci a zapise 1 000 000 jako indikaci, ze cesta je nepruchozi*/\n    if (subResults.length === 0) {\n      return i;\n    }\n    /*posun o jedno na dalsi hloubku v prohledavani*/\n    i++;\n  }\n\n  return 1000;  /*1000 znamena, ze cesta je pruchozi*/\n}\n","import React, { Component } from \"react\";\nimport GameNavigation from \"./gameNavigation\";\nimport Settings from \"./settings\";\nimport Board from \"./board\";\nimport Winner from \"./winner\";\nimport boardSetup from \"../services/boardSetup\";\nimport handleComputerMove from \"../services/computerMove\";\nimport handleHumanMove from \"../services/handleHumanMove\";\nimport findWinner from \"../services/findWinner\";\nimport findBadMoves from \"../services/findBadMoves\";\nimport {\n  computerLevelRange,\n  player0HeadColor,\n  player1HeadColor,\n  player0Color,\n  player1Color,\n  itemColor,\n  emptyCellColor\n} from \"../services/config.json\";\n\nclass CaterpilarGame extends Component {\n  state = {\n    boardSize: 14,\n    /*od 1 do 5*/\n    itemsToCollectCount: 3,\n    playersColors: [\n      { headColor: player0HeadColor, bodyColor: player0Color },\n      { headColor: player1HeadColor, bodyColor: player1Color }\n    ],\n    /*jestli je okno nastaveni aktivni*/\n    showSettings: false,\n\n    itemColor: itemColor,\n    emptyCellColor: emptyCellColor,\n\n    /*gameHas... kontroluje, aby computer nezacal hrat jako prvni*/\n    gameHasStarted: false,\n    computerRunning: 0,\n\n    /*computer level 1-15*/\n    computerLevel: 5,\n    computerLevelRange: computerLevelRange,\n\n    winner: null\n  };\n\n  constructor() {\n    super();\n\n    this.boardSetup = boardSetup.bind(this);\n    this.handleHumanMove = handleHumanMove.bind(this);\n    this.handleComputerMove = handleComputerMove.bind(this);\n    this.findWinner = findWinner.bind(this);\n    this.findBadMoves = findBadMoves.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const badMovesUpdate = this.state.badMoves === nextState.badMoves;\n    const computerTimeoutRefUpdate =\n      this.state.computerTimeoutRef === nextState.computerTimeoutRef;\n    return badMovesUpdate && computerTimeoutRefUpdate;\n  }\n\n  /*pro nacteni boardu pri prvnim nacteni stranky*/\n  componentWillMount() {\n    if (!this.state.boardCells) {\n      this.makeNewBoard();\n    }\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate() {\n    const {\n      computerTimeoutRef,\n      computerRunning,\n      gameHasStarted,\n      winner\n    } = this.state;\n    /*pokud ma hra viteze, uz se dale nepokracuje*/\n    if (winner !== null) return;\n\n    const givenWinner = this.findWinner();\n    /*winner muze byt i hrac nula, proto se returnuje null pri neuspechu*/\n    if (givenWinner !== null) {\n      /*pokud hra skoncila, zapise se vytez a vypne se protihrac*/\n      clearTimeout(computerTimeoutRef);\n      this.setState({ winner: givenWinner });\n    } else if (!computerRunning && gameHasStarted) {\n      this.setState({ computerRunning: 1 });\n      this.handleBadMoves();\n      this.makeComputerMove();\n    }\n  }\n\n  handleBadMoves = () => {\n    const newBadMoves = this.findBadMoves();\n    /*update pouze, pokud jsou nove badMoves odlisne od starych*/\n    if (newBadMoves !== this.state.badMoves) {\n      this.setState({ badMoves: newBadMoves });\n    }\n    return;\n  };\n\n  makeComputerMove = () => {\n    const { computerLevel: level, computerLevelRange: range } = this.state;\n    /* -1 protoze level ma cislovani od jednicky*/\n    const currentLevel = range[level - 1];\n    const sing = Math.round(Math.random()) ? -1 : 1;\n    const timeout = Math.ceil(\n      (currentLevel + Math.random() * (currentLevel / 2) * sing) * 1000\n    );\n    const timeoutRef = setTimeout(this.handleComputerMove, timeout);\n    this.setState({ computerTimeoutRef: timeoutRef });\n  };\n\n  stopGame = () => {\n    const { computerTimeoutRef } = this.state;\n    if (computerTimeoutRef) clearTimeout(computerTimeoutRef);\n    this.setState({ computerRunning: 0, gameHasStarted: false, winner: null });\n  };\n\n  handleNewGame = () => {\n    this.stopGame();\n    this.makeNewBoard();\n  };\n\n  proofItemsCount = boardCells => {\n    /*zajisti, aby pocet itemu nebyl nula*/\n    const count = boardCells.filter(e => e.item === \"item\").length;\n    return count; /*kdyz je count nula, vrati se false*/\n  };\n\n  makeNewBoard = async () => {\n    let newBoardCells;\n    while (true) {\n      newBoardCells = this.boardSetup();\n      if (this.proofItemsCount(newBoardCells)) break;\n    }\n\n    await this.setState({ boardCells: newBoardCells });\n  };\n\n  handleLevelChange = ({ currentTarget }) => {\n    this.setState({ computerLevel: currentTarget.value });\n  };\n\n  handleShowSettings = () => {\n    this.stopGame();\n    this.setState({ showSettings: true });\n  };\n\n  handleSettingsChange = async newState => {\n    await this.setState({ ...newState });\n    this.makeNewBoard();\n    this.setState({ showSettings: false });\n  };\n\n  render() {\n    const {\n      showSettings,\n      boardCells,\n      boardSize,\n      playersColors,\n      itemColor,\n      emptyCellColor,\n      computerLevel,\n      itemsToCollectCount,\n      winner\n    } = this.state;\n    return (\n      <React.Fragment>\n        <GameNavigation\n          playersColors={playersColors}\n          settings={this.handleSettings}\n          newGame={this.handleNewGame}\n          levelValue={computerLevel}\n          changeLevel={this.handleLevelChange}\n          showSettings={this.handleShowSettings}\n        />\n\n        <Winner winner={winner} newGame={this.handleNewGame} />\n        {(showSettings && (\n          <Settings\n            handleSettingsChange={this.handleSettingsChange}\n            boardSize={boardSize}\n            emptyCellColor={emptyCellColor}\n            itemColor={itemColor}\n            itemsToCollectCount={itemsToCollectCount}\n            playersColors={playersColors}\n          />\n        )) || (\n          <Board\n            boardCells={boardCells}\n            boardSize={boardSize}\n            playersColors={playersColors}\n            itemColor={itemColor}\n            emptyCellColor={emptyCellColor}\n            onKeyDown={this.handleHumanMove}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default CaterpilarGame;\n","import makeMove from \"./makeMove\";\nimport findPossibleMoves from \"./findPossibleMoves\";\n\nexport default function handleHumanMove({ key }) {\n  /*predpoklad, ze clovek je player 0*/\n  const humanPlayer = 0;\n  const { boardCells, boardSize, gameHasStarted } = this.state;\n\n  if (!gameHasStarted) this.setState({ gameHasStarted: true });\n\n  const playerPosition = boardCells.findIndex(\n    cell =>\n      cell.player &&\n      cell.player.head === true &&\n      cell.player.number === humanPlayer\n  );\n\n  const possibleMovesIndexes = findPossibleMoves(\n    playerPosition,\n    boardSize,\n    boardCells\n  );\n\n  let possibleMoves = [];\n\n  /*potrebuji objekty jednotlivych cells, ne jejich indexy*/\n\n  for (let item of possibleMovesIndexes) {\n    if (item === false || boardCells[item].player) continue;\n\n    possibleMoves.push(boardCells[item]);\n  }\n\n  const indexOfTargetPosition = possibleMoves.findIndex(\n    item => item.char === key\n  );\n  if (indexOfTargetPosition === -1) return;\n  else {\n    const targetCell = possibleMoves[indexOfTargetPosition];\n    const targetIndex = boardCells.indexOf(targetCell);\n    const oldBoardCells = [...boardCells];\n\n    const newBoardCells = makeMove(oldBoardCells, targetIndex, playerPosition);\n    this.setState({ boardCells: newBoardCells, gameHasStarted: 1 });\n  }\n}\n","export default function findWinner() {\n  const { boardCells } = this.state;\n  let itemsCount = 0;\n  let player0Count = 0;\n  let player1Count = 0;\n\n  for (let e of boardCells) {\n    if (e.item) itemsCount++;\n    else if (e.player) e.player.number === 0 ? player0Count++ : player1Count++;\n  }\n\n  if (\n    Math.max(player0Count, player1Count) >\n    (Math.min(player0Count, player1Count) + itemsCount)\n  ) {\n    return player0Count > player1Count ? 0 : 1;\n  } else if (itemsCount === 0 && player0Count === player1Count) {\n    return \"draw\";\n  } else return null;\n}\n","import findPossibleMoves from \"./findPossibleMoves\";\nimport findWay from \"./findWay\";\n\nexport default function findbadMovesIndexes() {\n  /*predpoklad ze computer player ma cislo 1*/\n  const { boardSize, boardCells } = this.state;\n  const computerPlayer = 1;\n  const calculationDepht = boardSize; //hloubka hledani bude toto\n  let badMovesIndexes = [];\n\n  const playerPosition = boardCells.findIndex(\n    cell =>\n      cell.player &&\n      cell.player.head === true &&\n      cell.player.number === computerPlayer\n  );\n\n  const givenMoves = findPossibleMoves(playerPosition, boardSize, boardCells);\n\n  for (let i = 0; i < givenMoves.length; i++) {\n    /*pokud se nepodari z jednoho z given moves najit cestu*/\n    /*do findway se posila konkretni index, ne array; vraci se maximalni delka cesty nebo 1000, pokud je cesta pruchozi*/\n    const wayLength = findWay(givenMoves[i], boardCells, boardSize, calculationDepht, computerPlayer);\n    /*v badMovesIndexes se uchovava hloubka cesty jednotlivych indexu z givenMoves*/\n    badMovesIndexes.push(wayLength);\n  }\n\n  let badMoves = [];\n  /*pokud jsou spatne vsechny moznosti (tedy zadna nema hodnotu 1000), \n  vymaze tu nejmene spatnou, aby bylo mozne udelat tah*/\n  if(!badMovesIndexes.find(e => e === 1000)){\n    let bestMove = Math.max(...badMovesIndexes);\n    for(let i = 0; i<givenMoves.length; i++){\n      if(badMovesIndexes[i] !== bestMove){\n        badMoves.push(givenMoves[i]);\n      }\n    }\n  }else{\n    for(let i = 0; i < givenMoves.length; i++){\n      if(badMovesIndexes[i] !== 1000){\n        badMoves.push(givenMoves[i]);\n      }\n    }\n  }\n\n  return badMoves;\n}\n","import React, { Component } from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport CaterpillarGame from \"./components/caterpillarGame\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    client: \"ca-pub-1157366739872118\"\n  };\n\n  render() {\n    const { client } = this.state;\n    return (\n      <React.Fragment>\n        <Switch>\n          <Route />\n        </Switch>\n        <header>\n          <h1>Caterpillar</h1>\n        </header>\n        <div className=\"caterpillar-game\">\n          <CaterpillarGame />\n        </div>\n        <footer>{\"© 2019 Benedikt Hofirek. All rights reserved.\"}</footer>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}